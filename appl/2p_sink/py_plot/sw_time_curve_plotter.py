# -*- coding: utf-8 -*-
"""Pc_sw curve plot from vtp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JP6iOMmhsyMekuu45fn1xAX7M3eyM1hI
"""

#!rm -rf /content/*

#pip install vtk

#from google.colab import files

# This will prompt you to select a file. After you select it, it will be uploaded to the Colab environment.
#uploaded = files.upload()

import numpy as np
import vtk
import matplotlib.pyplot as plt
import os

# Specify your file path
file_directory = "/home/hp/dumux/harsha_pnm/build-cmake/appl/2p_sink/time_50sec/" 

# Function to extract S_liq data from VTP file
def extract_s_liq_from_vtp(file_path):
    try:
        reader = vtk.vtkXMLPolyDataReader()
        reader.SetFileName(file_path)
        reader.Update()

        polydata = reader.GetOutput()

        # Extract S_liq (assuming it's stored as point data)
        s_liq_array = np.array(polydata.GetPointData().GetArray("S_liq"))

        return s_liq_array
    except Exception as e:
        print(f"Failed to extract S_liq data from {file_path}: {e}")

# Function to count the number of VTP files in the specified directory
def count_vtp_files(directory):
    vtp_files = [file for file in os.listdir(directory) if file.endswith(".vtp")]
    return len(vtp_files)

# Determine the number of VTP files
num_vtp_files = count_vtp_files(file_directory)

# Generate file paths dynamically
file_paths = [os.path.join(file_directory, f"2p_im_magic_time_50sec-{i:05d}.vtp") for i in range(num_vtp_files)]

# Extract S_liq data from each VTP file
s_liq_data_arrays = [extract_s_liq_from_vtp(file_path) for file_path in file_paths]

# Filter out None values (failed extractions)
s_liq_data_arrays = [s_liq_data for s_liq_data in s_liq_data_arrays if s_liq_data is not None]

# Print the number of VTP files detected
print(f"Number of VTP files detected: {num_vtp_files}")

# Define markers and colors for each file
markers = ['o', 's', '^', 'D', 'v', '*', 'X', 'P', 'h', '+']  # Add more markers if needed
colors = plt.cm.tab10(np.linspace(0, 1, len(s_liq_data_arrays)))

# Pore indices to plot
pore_indices = [4, 13, 22, 31]

# Create subplots
fig, axs = plt.subplots(2, 2, figsize=(12, 10))

# Plot S_liq against file number for each VTP file in subplots
for idx, pore_index in enumerate(pore_indices):
    ax = axs[idx // 2, idx % 2]  # Get subplot axis
    ax.set_xlabel('Time step', fontsize=12)
    ax.set_ylabel('Local S$_w$ [-]', fontsize=12)
    ax.set_title(f'Pore {pore_index}', fontsize=14)  # Use basename to get file name
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.tick_params(axis='both', which='major', direction='out', length=6, width=1, labelsize=10)
    ax.tick_params(axis='both', which='minor', direction='out', length=3, width=1)
    ax.xaxis.set_tick_params(width=1.5)
    ax.yaxis.set_tick_params(width=1.5)

    for i, s_liq_array in enumerate(s_liq_data_arrays):
        time_step = i + 1  # timestep starts from 0
        marker = markers[i % len(markers)]  # Cycle through markers
        color = colors[i]  # Get color from the predefined list
        
        ax.plot(time_step, s_liq_array[pore_index], color=color, marker=marker, markersize=6, label=f'Time Step {i}')
    
    # Add legend to the current subplot
    #ax.legend(fontsize=8, loc='upper left', ncol = 4)


# Adjust layout
plt.tight_layout()

# Save subplots as .png file with file names
subplots_filename = os.path.join(file_directory, "subplots_S_liq_with_legend.png")
plt.savefig(subplots_filename, bbox_inches='tight')
plt.show()
'''
# Save individual plots for each pore index with file names
for pore_index in pore_indices:
    # Plot S_liq against time_step for each VTP file
    plt.figure(figsize=(12, 8))
    
    plt.xlabel('Time step', fontsize=14)
    plt.ylabel('Local S$_w$ [-]', fontsize=14)
    plt.title(f'Local S$_w$ vs. timestep @ pore body-{pore_index}', fontsize=16)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()
    
    for i, s_liq_array in enumerate(s_liq_data_arrays):
        time_step = i + 1  Time step starts from 0
        marker = markers[i % len(markers)]  # Cycle through markers
        color = colors[i]  # Get color from the predefined list
        plt.plot(time_step, s_liq_array[pore_index], color=color, marker=marker, markersize=8, label=f'Time Step {i}')
    
    #plt.legend(fontsize=10, loc='upper left', ncol = 4)  # Adjust legend location and font size
    
    # Save plot as .png file with file names
    plot_filename = os.path.join(file_directory, f"plot_pore_{pore_index}_S_liq_with_legend.png")
    plt.savefig(plot_filename, bbox_inches='tight')
    plt.close()  # Close the current figure to avoid overlapping plots
'''